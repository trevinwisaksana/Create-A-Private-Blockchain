{
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate/src/\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate\",\"filename\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate/src/blockchain.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.14.3:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "/Users/stockbit/Downloads/project_1_v2_boilerplate",
      "filename": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/blockchain.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "/Users/stockbit/Downloads/project_1_v2_boilerplate",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-class-properties",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": true,
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/blockchain.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods",
          "numericSeparator",
          "nullishCoalescingOperator",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/blockchain.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
        "sourceFileName": "blockchain.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n/**\n *                          Blockchain Class\n *  The Blockchain class contain the basics functions to create your own private blockchain\n *  It uses libraries like `crypto-js` to create the hashes for each block and `bitcoinjs-message`\n *  to verify a message signature. The chain is stored in the array\n *  `this.chain = [];`. Of course each time you run the application the chain will be empty because and array\n *  isn't a persisten storage method.\n *\n */\nconst SHA256 = require('crypto-js/sha256');\n\nconst BlockClass = require('./block.js');\n\nconst bitcoinMessage = require('bitcoinjs-message');\n\nclass Blockchain {\n  /**\n   * Constructor of the class, you will need to setup your chain array and the height\n   * of your chain (the length of your chain array).\n   * Also everytime you create a Blockchain class you will need to initialized the chain creating\n   * the Genesis Block.\n   * The methods in this class will always return a Promise to allow client applications or\n   * other backends to call asynchronous functions.\n   */\n  constructor() {\n    this.chain = [];\n    this.height = -1;\n    this.initializeChain();\n  }\n  /**\n   * This method will check for the height of the chain and if there isn't a Genesis Block it will create it.\n   * You should use the `addBlock(block)` to create the Genesis Block\n   * Passing as a data `{data: 'Genesis Block'}`\n   */\n\n\n  async initializeChain() {\n    if (this.height === -1) {\n      let block = new BlockClass.Block({\n        data: 'Genesis Block'\n      });\n      await this._addBlock(block);\n    }\n  }\n  /**\n   * Utility method that return a Promise that will resolve with the height of the chain\n   */\n\n\n  getChainHeight() {\n    return new Promise((resolve, reject) => {\n      resolve(this.height);\n    });\n  }\n  /**\n   * _addBlock(block) will store a block in the chain\n   * @param {*} block\n   * The method will return a Promise that will resolve with the block added\n   * or reject if an error happen during the execution.\n   * You will need to check for the height to assign the `previousBlockHash`,\n   * assign the `timestamp` and the correct `height`...At the end you need to\n   * create the `block hash` and push the block into the chain array. Don't for get\n   * to update the `this.height`\n   * Note: the symbol `_` in the method name indicates in the javascript convention\n   * that this method is a private method.\n   */\n\n\n  _addBlock(block) {\n    let self = this;\n    return new Promise(async (resolve, reject) => {\n      if (this.chain.length > 0) {\n        // previous block hash\n        block.previousBlockHash = this.chain[this.chain.length - 1].hash;\n      } // block height\n\n\n      block.height = this.chain.length; // UTC timestamp\n\n      block.time = new Date().getTime().toString().slice(0, -3); // SHA256 requires a string of data\n\n      block.hash = SHA256(JSON.stringify(block)).toString();\n      let validationErrors = await self.validateChain();\n\n      if (block.hash && validationErrors.length == 0) {\n        // add block to chain\n        self.chain.push(block);\n        self.height++;\n        resolve(block);\n      } else {\n        reject(\"Failed to add block\");\n      }\n    });\n  }\n  /**\n   * The requestMessageOwnershipVerification(address) method\n   * will allow you  to request a message that you will use to\n   * sign it with your Bitcoin Wallet (Electrum or Bitcoin Core)\n   * This is the first step before submit your Block.\n   * The method return a Promise that will resolve with the message to be signed\n   * @param {*} address\n   */\n\n\n  requestMessageOwnershipVerification(address) {\n    return new Promise(resolve => {\n      resolve(`${address}:${new Date().getTime().toString().slice(0, -3)}:starRegistry`);\n    });\n  }\n  /**\n   * The submitStar(address, message, signature, star) method\n   * will allow users to register a new Block with the star object\n   * into the chain. This method will resolve with the Block added or\n   * reject with an error.\n   * Algorithm steps:\n   * 1. Get the time from the message sent as a parameter example: `parseInt(message.split(':')[1])`\n   * 2. Get the current time: `let currentTime = parseInt(new Date().getTime().toString().slice(0, -3));`\n   * 3. Check if the time elapsed is less than 5 minutes\n   * 4. Veify the message with wallet address and signature: `bitcoinMessage.verify(message, address, signature)`\n   * 5. Create the block and add it to the chain\n   * 6. Resolve with the block added.\n   * @param {*} address\n   * @param {*} message\n   * @param {*} signature\n   * @param {*} star\n   */\n\n\n  submitStar(address, message, signature, star) {\n    let self = this;\n    return new Promise(async (resolve, reject) => {\n      let messageTime = parseInt(message.split(':')[1]);\n      let currentTime = parseInt(new Date().getTime().toString().slice(0, -3));\n      var FIVE_MIN = 5 * 60 * 1000;\n      let deadline = messageTime + FIVE_MIN;\n\n      if (deadline >= currentTime) {\n        if (bitcoinMessage.verify(message, address, signature)) {\n          let block = new BlockClass.Block({\n            owner: address,\n            star: star\n          });\n          let addedBlock = await self._addBlock(block);\n          resolve(addedBlock);\n        } else {\n          reject(\"Signature is not valid\");\n        }\n      } else {\n        reject(\"Time has elapsed more than 5 minutes\");\n      }\n    });\n  }\n  /**\n   * This method will return a Promise that will resolve with the Block\n   *  with the hash passed as a parameter.\n   * Search on the chain array for the block that has the hash.\n   * @param {*} hash\n   */\n\n\n  getBlockByHash(hash) {\n    let self = this;\n    return new Promise((resolve, reject) => {\n      let filteredResults = self.chain.array.filter(block => block.hash == hash);\n\n      if (filteredResults.length == 1) {\n        resolve(filteredResults[0]);\n      } else {\n        reject(\"Block does not exist\");\n      }\n    });\n  }\n  /**\n   * This method will return a Promise that will resolve with the Block object\n   * with the height equal to the parameter `height`\n   * @param {*} height\n   */\n\n\n  getBlockByHeight(height) {\n    let self = this;\n    return new Promise((resolve, reject) => {\n      let block = self.chain.filter(p => p.height === height)[0];\n\n      if (block) {\n        resolve(block);\n      } else {\n        resolve(null);\n      }\n    });\n  }\n  /**\n   * This method will return a Promise that will resolve with an array of Stars objects existing in the chain\n   * and are belongs to the owner with the wallet address passed as parameter.\n   * Remember the star should be returned decoded.\n   * @param {*} address\n   */\n\n\n  getStarsByWalletAddress(address) {\n    let self = this;\n    let stars = [];\n    return new Promise(async (resolve, reject) => {\n      self.chain.forEach(async block => {\n        let data = await block.getBData();\n        if (data.owner === address) stars.push(data);\n      });\n\n      if (stars.length == 0) {\n        resolve(stars);\n      } else {\n        reject(\"There is star asociated with this address ${address}\");\n      }\n    });\n  }\n  /**\n   * This method will return a Promise that will resolve with the list of errors when validating the chain.\n   * Steps to validate:\n   * 1. You should validate each block using `validateBlock`\n   * 2. Each Block should check the with the previousBlockHash\n   */\n\n\n  validateChain() {\n    let self = this;\n    let errorLog = [];\n    return new Promise(async (resolve, reject) => {\n      self.chain.forEach(block => {\n        let isValid = block.validate();\n\n        if (!isValid) {\n          errorLog.push(new Error('Hash of previous block do not match ${block.height}'));\n        }\n      });\n      resolve(errorLog);\n    });\n  }\n\n}\n\nmodule.exports.Blockchain = Blockchain;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "blockchain.js"
      ],
      "names": [
        "SHA256",
        "require",
        "BlockClass",
        "bitcoinMessage",
        "Blockchain",
        "constructor",
        "chain",
        "height",
        "initializeChain",
        "block",
        "Block",
        "data",
        "_addBlock",
        "getChainHeight",
        "Promise",
        "resolve",
        "reject",
        "self",
        "length",
        "previousBlockHash",
        "hash",
        "time",
        "Date",
        "getTime",
        "toString",
        "slice",
        "JSON",
        "stringify",
        "validationErrors",
        "validateChain",
        "push",
        "requestMessageOwnershipVerification",
        "address",
        "submitStar",
        "message",
        "signature",
        "star",
        "messageTime",
        "parseInt",
        "split",
        "currentTime",
        "FIVE_MIN",
        "deadline",
        "verify",
        "owner",
        "addedBlock",
        "getBlockByHash",
        "filteredResults",
        "array",
        "filter",
        "getBlockByHeight",
        "p",
        "getStarsByWalletAddress",
        "stars",
        "forEach",
        "getBData",
        "errorLog",
        "isValid",
        "validate",
        "Error",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
      "sourcesContent": [
        "/**\n *                          Blockchain Class\n *  The Blockchain class contain the basics functions to create your own private blockchain\n *  It uses libraries like `crypto-js` to create the hashes for each block and `bitcoinjs-message`\n *  to verify a message signature. The chain is stored in the array\n *  `this.chain = [];`. Of course each time you run the application the chain will be empty because and array\n *  isn't a persisten storage method.\n *\n */\n\nconst SHA256 = require('crypto-js/sha256');\nconst BlockClass = require('./block.js');\nconst bitcoinMessage = require('bitcoinjs-message');\n\nclass Blockchain {\n\n    /**\n     * Constructor of the class, you will need to setup your chain array and the height\n     * of your chain (the length of your chain array).\n     * Also everytime you create a Blockchain class you will need to initialized the chain creating\n     * the Genesis Block.\n     * The methods in this class will always return a Promise to allow client applications or\n     * other backends to call asynchronous functions.\n     */\n    constructor() {\n        this.chain = [];\n        this.height = -1;\n        this.initializeChain();\n    }\n\n    /**\n     * This method will check for the height of the chain and if there isn't a Genesis Block it will create it.\n     * You should use the `addBlock(block)` to create the Genesis Block\n     * Passing as a data `{data: 'Genesis Block'}`\n     */\n    async initializeChain() {\n        if( this.height === -1){\n            let block = new BlockClass.Block({data: 'Genesis Block'});\n            await this._addBlock(block);\n        }\n    }\n\n    /**\n     * Utility method that return a Promise that will resolve with the height of the chain\n     */\n    getChainHeight() {\n        return new Promise((resolve, reject) => {\n            resolve(this.height);\n        });\n    }\n\n    /**\n     * _addBlock(block) will store a block in the chain\n     * @param {*} block\n     * The method will return a Promise that will resolve with the block added\n     * or reject if an error happen during the execution.\n     * You will need to check for the height to assign the `previousBlockHash`,\n     * assign the `timestamp` and the correct `height`...At the end you need to\n     * create the `block hash` and push the block into the chain array. Don't for get\n     * to update the `this.height`\n     * Note: the symbol `_` in the method name indicates in the javascript convention\n     * that this method is a private method.\n     */\n    _addBlock(block) {\n        let self = this;\n        return new Promise(async (resolve, reject) => {\n            if (this.chain.length>0) {\n                // previous block hash\n                block.previousBlockHash = this.chain[this.chain.length-1].hash;\n            }\n\n            // block height\n            block.height = this.chain.length;\n            // UTC timestamp\n            block.time = new Date().getTime().toString().slice(0,-3);\n            // SHA256 requires a string of data\n            block.hash = SHA256(JSON.stringify(block)).toString();\n\n            let validationErrors = await self.validateChain();\n\n            if (block.hash && validationErrors.length == 0) {\n                // add block to chain\n                self.chain.push(block);\n                self.height++;\n                resolve(block);\n            } else {\n                reject(\"Failed to add block\");\n            }\n        });\n    }\n\n    /**\n     * The requestMessageOwnershipVerification(address) method\n     * will allow you  to request a message that you will use to\n     * sign it with your Bitcoin Wallet (Electrum or Bitcoin Core)\n     * This is the first step before submit your Block.\n     * The method return a Promise that will resolve with the message to be signed\n     * @param {*} address\n     */\n    requestMessageOwnershipVerification(address) {\n        return new Promise((resolve) => {\n            resolve(`${address}:${new Date().getTime().toString().slice(0,-3)}:starRegistry`);\n        });\n    }\n\n    /**\n     * The submitStar(address, message, signature, star) method\n     * will allow users to register a new Block with the star object\n     * into the chain. This method will resolve with the Block added or\n     * reject with an error.\n     * Algorithm steps:\n     * 1. Get the time from the message sent as a parameter example: `parseInt(message.split(':')[1])`\n     * 2. Get the current time: `let currentTime = parseInt(new Date().getTime().toString().slice(0, -3));`\n     * 3. Check if the time elapsed is less than 5 minutes\n     * 4. Veify the message with wallet address and signature: `bitcoinMessage.verify(message, address, signature)`\n     * 5. Create the block and add it to the chain\n     * 6. Resolve with the block added.\n     * @param {*} address\n     * @param {*} message\n     * @param {*} signature\n     * @param {*} star\n     */\n    submitStar(address, message, signature, star) {\n        let self = this;\n        return new Promise(async (resolve, reject) => {\n            let messageTime = parseInt(message.split(':')[1]);\n            let currentTime = parseInt(new Date().getTime().toString().slice(0, -3));\n\n            var FIVE_MIN=5*60*1000;\n            let deadline = messageTime + FIVE_MIN;\n\n            if (deadline >= currentTime) {\n                if (bitcoinMessage.verify(message, address, signature)) {\n                    let block = new BlockClass.Block({owner: address, star: star});\n                    let addedBlock = await self._addBlock(block);\n                    resolve(addedBlock);\n                } else {\n                    reject(\"Signature is not valid\");\n                }\n\n            } else {\n                reject(\"Time has elapsed more than 5 minutes\");\n            }\n        });\n    }\n\n    /**\n     * This method will return a Promise that will resolve with the Block\n     *  with the hash passed as a parameter.\n     * Search on the chain array for the block that has the hash.\n     * @param {*} hash\n     */\n    getBlockByHash(hash) {\n        let self = this;\n        return new Promise((resolve, reject) => {\n            let filteredResults = self.chain.array.filter(block => block.hash == hash)\n\n            if (filteredResults.length == 1) {\n                resolve(filteredResults[0]);\n            } else {\n                reject(\"Block does not exist\");\n            }\n        });\n    }\n\n    /**\n     * This method will return a Promise that will resolve with the Block object\n     * with the height equal to the parameter `height`\n     * @param {*} height\n     */\n    getBlockByHeight(height) {\n        let self = this;\n        return new Promise((resolve, reject) => {\n            let block = self.chain.filter(p => p.height === height)[0];\n            if(block){\n                resolve(block);\n            } else {\n                resolve(null);\n            }\n        });\n    }\n\n    /**\n     * This method will return a Promise that will resolve with an array of Stars objects existing in the chain\n     * and are belongs to the owner with the wallet address passed as parameter.\n     * Remember the star should be returned decoded.\n     * @param {*} address\n     */\n    getStarsByWalletAddress(address) {\n        let self = this;\n        let stars = [];\n        return new Promise(async (resolve, reject) => {\n            self.chain.forEach(async (block) => {\n                let data = await block.getBData();\n                if (data.owner === address) stars.push(data);\n            });\n\n            if(stars.length == 0){\n                resolve(stars);\n            } else {\n                reject(\"There is star asociated with this address ${address}\");\n            }\n        });\n    }\n\n    /**\n     * This method will return a Promise that will resolve with the list of errors when validating the chain.\n     * Steps to validate:\n     * 1. You should validate each block using `validateBlock`\n     * 2. Each Block should check the with the previousBlockHash\n     */\n    validateChain() {\n        let self = this;\n        let errorLog = [];\n        return new Promise(async (resolve, reject) => {\n            self.chain.forEach((block) => {\n                let isValid = block.validate();\n\n                if(!isValid){\n                    errorLog.push(new Error('Hash of previous block do not match ${block.height}'));\n                }\n            });\n\n            resolve(errorLog);\n        });\n    }\n\n}\n\nmodule.exports.Blockchain = Blockchain;\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1622013326990
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate/src/\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate\",\"filename\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate/src/block.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-class-properties\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-numeric-separator\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.14.3:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "/Users/stockbit/Downloads/project_1_v2_boilerplate",
      "filename": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/block.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "/Users/stockbit/Downloads/project_1_v2_boilerplate",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-class-properties",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": true,
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/block.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods",
          "numericSeparator",
          "nullishCoalescingOperator",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/block.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
        "sourceFileName": "block.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n/**\n *                          Block class\n *  The Block class is a main component into any Blockchain platform,\n *  it will store the data and act as a dataset for your application.\n *  The class will expose a method to validate the data... The body of\n *  the block will contain an Object that contain the data to be stored,\n *  the data should be stored encoded.\n *  All the exposed methods should return a Promise to allow all the methods\n *  run asynchronous.\n */\nconst SHA256 = require('crypto-js/sha256');\n\nconst hex2ascii = require('hex2ascii');\n\nclass Block {\n  // Constructor - argument data will be the object containing the transaction data\n  constructor(data) {\n    this.hash = null; // Hash of the block\n\n    this.height = 0; // Block Height (consecutive number of each block)\n\n    this.body = Buffer(JSON.stringify(data)).toString('hex'); // Will contain the transactions stored in the block, by default it will encode the data\n\n    this.time = 0; // Timestamp for the Block creation\n\n    this.previousBlockHash = null; // Reference to the previous Block Hash\n  }\n  /**\n   *  validate() method will validate if the block has been tampered or not.\n   *  Been tampered means that someone from outside the application tried to change\n   *  values in the block data as a consecuence the hash of the block should be different.\n   *  Steps:\n   *  1. Return a new promise to allow the method be called asynchronous.\n   *  2. Save the in auxiliary variable the current hash of the block (`this` represent the block object)\n   *  3. Recalculate the hash of the entire block (Use SHA256 from crypto-js library)\n   *  4. Compare if the auxiliary hash value is different from the calculated one.\n   *  5. Resolve true or false depending if it is valid or not.\n   *  Note: to access the class values inside a Promise code you need to create an auxiliary value `let self = this;`\n   */\n\n\n  validate() {\n    let self = this;\n    return new Promise((resolve, reject) => {\n      try {\n        // Save in auxiliary variable the current block hash\n        let string = JSON.stringify(self);\n        let recalculatedHash = SHA256(string); // Recalculate the hash of the Block\n        // Comparing if the hashes changed\n        // Returning the Block is valid\n        // do a thing, possibly async, then…\n\n        resolve(self.hash == recalculatedHash);\n      } catch (error) {\n        reject(new Error(error));\n      }\n    });\n  }\n  /**\n   *  Auxiliary Method to return the block body (decoding the data)\n   *  Steps:\n   *\n   *  1. Use hex2ascii module to decode the data\n   *  2. Because data is a javascript object use JSON.parse(string) to get the Javascript Object\n   *  3. Resolve with the data and make sure that you don't need to return the data for the `genesis block`\n   *     or Reject with an error.\n   */\n\n\n  getBData() {\n    // Getting the encoded data saved in the Block\n    // Decoding the data to retrieve the JSON representation of the object\n    // Parse the data to an object to be retrieve.\n    // Resolve with the data if the object isn't the Genesis block\n    let self = this;\n    return new Promise((resolve, reject) => {\n      try {\n        let decodedData = hex2ascii(self.body);\n        let parsedData = JSON.parse(decodedData);\n\n        if (self.height > 0) {\n          resolve(parsedData);\n        } else {\n          reject(\"Cannot retrieve genesis block\");\n        }\n      } catch (error) {\n        reject(new Error(error));\n      }\n    });\n  }\n\n}\n\nmodule.exports.Block = Block; // Exposing the Block class as a module\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "block.js"
      ],
      "names": [
        "SHA256",
        "require",
        "hex2ascii",
        "Block",
        "constructor",
        "data",
        "hash",
        "height",
        "body",
        "Buffer",
        "JSON",
        "stringify",
        "toString",
        "time",
        "previousBlockHash",
        "validate",
        "self",
        "Promise",
        "resolve",
        "reject",
        "string",
        "recalculatedHash",
        "error",
        "Error",
        "getBData",
        "decodedData",
        "parsedData",
        "parse",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AAEA,MAAME,KAAN,CAAY;AAER;AACHC,EAAAA,WAAW,CAACC,IAAD,EAAM;AAChB,SAAKC,IAAL,GAAY,IAAZ,CADgB,CAC4C;;AAC5D,SAAKC,MAAL,GAAc,CAAd,CAFgB,CAE4C;;AAC5D,SAAKC,IAAL,GAAYC,MAAM,CAACC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAD,CAAN,CAA6BO,QAA7B,CAAsC,KAAtC,CAAZ,CAHgB,CAG4C;;AAC5D,SAAKC,IAAL,GAAY,CAAZ,CAJgB,CAI4C;;AAC5D,SAAKC,iBAAL,GAAyB,IAAzB,CALgB,CAK4C;AACzD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,QAAIC,IAAI,GAAG,IAAX;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAI;AACA;AACA,YAAIC,MAAM,GAAGV,IAAI,CAACC,SAAL,CAAeK,IAAf,CAAb;AACA,YAAIK,gBAAgB,GAAGrB,MAAM,CAACoB,MAAD,CAA7B,CAHA,CAKA;AACA;AACA;AACA;;AACAF,QAAAA,OAAO,CAACF,IAAI,CAACV,IAAL,IAAae,gBAAd,CAAP;AAEH,OAXD,CAWE,OAAOC,KAAP,EAAc;AACZH,QAAAA,MAAM,CAAC,IAAII,KAAJ,CAAUD,KAAV,CAAD,CAAN;AACH;AACJ,KAfM,CAAP;AAgBH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,GAAG;AACP;AACA;AACA;AAEA;AACA,QAAIR,IAAI,GAAG,IAAX;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAI;AACA,YAAIM,WAAW,GAAGvB,SAAS,CAACc,IAAI,CAACR,IAAN,CAA3B;AACA,YAAIkB,UAAU,GAAGhB,IAAI,CAACiB,KAAL,CAAWF,WAAX,CAAjB;;AAEA,YAAIT,IAAI,CAACT,MAAL,GAAc,CAAlB,EAAqB;AACjBW,UAAAA,OAAO,CAACQ,UAAD,CAAP;AACH,SAFD,MAEO;AACHP,UAAAA,MAAM,CAAC,+BAAD,CAAN;AACH;AAEJ,OAVD,CAUE,OAAOG,KAAP,EAAc;AACZH,QAAAA,MAAM,CAAC,IAAII,KAAJ,CAAUD,KAAV,CAAD,CAAN;AACH;AAEJ,KAfM,CAAP;AAgBH;;AA3EO;;AA+EZM,MAAM,CAACC,OAAP,CAAe1B,KAAf,GAAuBA,KAAvB,C,CAAiD",
      "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
      "sourcesContent": [
        "/**\n *                          Block class\n *  The Block class is a main component into any Blockchain platform,\n *  it will store the data and act as a dataset for your application.\n *  The class will expose a method to validate the data... The body of\n *  the block will contain an Object that contain the data to be stored,\n *  the data should be stored encoded.\n *  All the exposed methods should return a Promise to allow all the methods\n *  run asynchronous.\n */\n\nconst SHA256 = require('crypto-js/sha256');\nconst hex2ascii = require('hex2ascii');\n\nclass Block {\n\n    // Constructor - argument data will be the object containing the transaction data\n\tconstructor(data){\n\t\tthis.hash = null;                                           // Hash of the block\n\t\tthis.height = 0;                                            // Block Height (consecutive number of each block)\n\t\tthis.body = Buffer(JSON.stringify(data)).toString('hex');   // Will contain the transactions stored in the block, by default it will encode the data\n\t\tthis.time = 0;                                              // Timestamp for the Block creation\n\t\tthis.previousBlockHash = null;                              // Reference to the previous Block Hash\n    }\n\n    /**\n     *  validate() method will validate if the block has been tampered or not.\n     *  Been tampered means that someone from outside the application tried to change\n     *  values in the block data as a consecuence the hash of the block should be different.\n     *  Steps:\n     *  1. Return a new promise to allow the method be called asynchronous.\n     *  2. Save the in auxiliary variable the current hash of the block (`this` represent the block object)\n     *  3. Recalculate the hash of the entire block (Use SHA256 from crypto-js library)\n     *  4. Compare if the auxiliary hash value is different from the calculated one.\n     *  5. Resolve true or false depending if it is valid or not.\n     *  Note: to access the class values inside a Promise code you need to create an auxiliary value `let self = this;`\n     */\n    validate() {\n        let self = this;\n        return new Promise((resolve, reject) => {\n            try {\n                // Save in auxiliary variable the current block hash\n                let string = JSON.stringify(self)\n                let recalculatedHash = SHA256(string)\n\n                // Recalculate the hash of the Block\n                // Comparing if the hashes changed\n                // Returning the Block is valid\n                // do a thing, possibly async, then…\n                resolve(self.hash == recalculatedHash);\n\n            } catch (error) {\n                reject(new Error(error));\n            }\n        });\n    }\n\n    /**\n     *  Auxiliary Method to return the block body (decoding the data)\n     *  Steps:\n     *\n     *  1. Use hex2ascii module to decode the data\n     *  2. Because data is a javascript object use JSON.parse(string) to get the Javascript Object\n     *  3. Resolve with the data and make sure that you don't need to return the data for the `genesis block`\n     *     or Reject with an error.\n     */\n    getBData() {\n        // Getting the encoded data saved in the Block\n        // Decoding the data to retrieve the JSON representation of the object\n        // Parse the data to an object to be retrieve.\n\n        // Resolve with the data if the object isn't the Genesis block\n        let self = this;\n        return new Promise((resolve, reject) => {\n            try {\n                let decodedData = hex2ascii(self.body);\n                let parsedData = JSON.parse(decodedData);\n\n                if (self.height > 0) {\n                    resolve(parsedData);\n                } else {\n                    reject(\"Cannot retrieve genesis block\");\n                }\n\n            } catch (error) {\n                reject(new Error(error));\n            }\n\n        });\n    }\n\n}\n\nmodule.exports.Block = Block;                    // Exposing the Block class as a module\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1622013286008
  },
  "{\"assumptions\":{},\"sourceRoot\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate/src/\",\"caller\":{\"name\":\"@babel/node\"},\"configFile\":false,\"cwd\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate\",\"filename\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate/src/block.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"production\",\"root\":\"/Users/stockbit/Downloads/project_1_v2_boilerplate\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":true,\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.14.3:production": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
      "caller": {
        "name": "@babel/node"
      },
      "configFile": false,
      "cwd": "/Users/stockbit/Downloads/project_1_v2_boilerplate",
      "filename": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/block.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "browserslistConfigFile": false,
      "envName": "production",
      "root": "/Users/stockbit/Downloads/project_1_v2_boilerplate",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "syntax-class-properties",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-numeric-separator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-nullish-coalescing-operator",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": true,
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-json-strings",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-optional-catch-binding",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-async-generators",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "syntax-object-rest-spread",
          "visitor": {
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/block.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "classPrivateMethods",
          "numericSeparator",
          "nullishCoalescingOperator",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "dynamicImport",
          "exportNamespaceFrom"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/block.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
        "sourceFileName": "block.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n/**\n *                          Block class\n *  The Block class is a main component into any Blockchain platform,\n *  it will store the data and act as a dataset for your application.\n *  The class will expose a method to validate the data... The body of\n *  the block will contain an Object that contain the data to be stored,\n *  the data should be stored encoded.\n *  All the exposed methods should return a Promise to allow all the methods\n *  run asynchronous.\n */\nconst SHA256 = require('crypto-js/sha256');\n\nconst hex2ascii = require('hex2ascii');\n\nclass Block {\n  // Constructor - argument data will be the object containing the transaction data\n  constructor(data) {\n    this.hash = null; // Hash of the block\n\n    this.height = 0; // Block Height (consecutive number of each block)\n\n    this.body = Buffer(JSON.stringify(data)).toString('hex'); // Will contain the transactions stored in the block, by default it will encode the data\n\n    this.time = 0; // Timestamp for the Block creation\n\n    this.previousBlockHash = null; // Reference to the previous Block Hash\n  }\n  /**\n   *  validate() method will validate if the block has been tampered or not.\n   *  Been tampered means that someone from outside the application tried to change\n   *  values in the block data as a consecuence the hash of the block should be different.\n   *  Steps:\n   *  1. Return a new promise to allow the method be called asynchronous.\n   *  2. Save the in auxiliary variable the current hash of the block (`this` represent the block object)\n   *  3. Recalculate the hash of the entire block (Use SHA256 from crypto-js library)\n   *  4. Compare if the auxiliary hash value is different from the calculated one.\n   *  5. Resolve true or false depending if it is valid or not.\n   *  Note: to access the class values inside a Promise code you need to create an auxiliary value `let self = this;`\n   */\n\n\n  validate() {\n    let self = this;\n    return new Promise((resolve, reject) => {\n      try {\n        // Save in auxiliary variable the current block hash\n        let string = JSON.stringify(self);\n        let recalculatedHash = SHA256(string); // Recalculate the hash of the Block\n        // Comparing if the hashes changed\n        // Returning the Block is valid\n        // do a thing, possibly async, then…\n\n        resolve(self.hash == recalculatedHash);\n      } catch (error) {\n        reject(new Error(error));\n      }\n    });\n  }\n  /**\n   *  Auxiliary Method to return the block body (decoding the data)\n   *  Steps:\n   *\n   *  1. Use hex2ascii module to decode the data\n   *  2. Because data is a javascript object use JSON.parse(string) to get the Javascript Object\n   *  3. Resolve with the data and make sure that you don't need to return the data for the `genesis block`\n   *     or Reject with an error.\n   */\n\n\n  getBData() {\n    // Getting the encoded data saved in the Block\n    // Decoding the data to retrieve the JSON representation of the object\n    // Parse the data to an object to be retrieve.\n    // Resolve with the data if the object isn't the Genesis block\n    let self = this;\n    return new Promise(async (resolve, reject) => {\n      try {\n        let decodedData = hex2ascii(self.body);\n        let parsedData = JSON.parse(decodedData);\n\n        if (self.height > 0) {\n          resolve(parsedData);\n        } else {\n          reject(\"Cannot retrieve genesis block\");\n        }\n      } catch (error) {\n        reject(new Error(error));\n      }\n    });\n  }\n\n}\n\nmodule.exports.Block = Block; // Exposing the Block class as a module\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "block.js"
      ],
      "names": [
        "SHA256",
        "require",
        "hex2ascii",
        "Block",
        "constructor",
        "data",
        "hash",
        "height",
        "body",
        "Buffer",
        "JSON",
        "stringify",
        "toString",
        "time",
        "previousBlockHash",
        "validate",
        "self",
        "Promise",
        "resolve",
        "reject",
        "string",
        "recalculatedHash",
        "error",
        "Error",
        "getBData",
        "decodedData",
        "parsedData",
        "parse",
        "module",
        "exports"
      ],
      "mappings": ";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AAEA,MAAME,KAAN,CAAY;AAER;AACHC,EAAAA,WAAW,CAACC,IAAD,EAAM;AAChB,SAAKC,IAAL,GAAY,IAAZ,CADgB,CAC4C;;AAC5D,SAAKC,MAAL,GAAc,CAAd,CAFgB,CAE4C;;AAC5D,SAAKC,IAAL,GAAYC,MAAM,CAACC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAD,CAAN,CAA6BO,QAA7B,CAAsC,KAAtC,CAAZ,CAHgB,CAG4C;;AAC5D,SAAKC,IAAL,GAAY,CAAZ,CAJgB,CAI4C;;AAC5D,SAAKC,iBAAL,GAAyB,IAAzB,CALgB,CAK4C;AACzD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,GAAG;AACP,QAAIC,IAAI,GAAG,IAAX;AACA,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAI;AACA;AACA,YAAIC,MAAM,GAAGV,IAAI,CAACC,SAAL,CAAeK,IAAf,CAAb;AACA,YAAIK,gBAAgB,GAAGrB,MAAM,CAACoB,MAAD,CAA7B,CAHA,CAKA;AACA;AACA;AACA;;AACAF,QAAAA,OAAO,CAACF,IAAI,CAACV,IAAL,IAAae,gBAAd,CAAP;AAEH,OAXD,CAWE,OAAOC,KAAP,EAAc;AACZH,QAAAA,MAAM,CAAC,IAAII,KAAJ,CAAUD,KAAV,CAAD,CAAN;AACH;AACJ,KAfM,CAAP;AAgBH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,QAAQ,GAAG;AACP;AACA;AACA;AAEA;AACA,QAAIR,IAAI,GAAG,IAAX;AACA,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,UAAI;AACA,YAAIM,WAAW,GAAGvB,SAAS,CAACc,IAAI,CAACR,IAAN,CAA3B;AACA,YAAIkB,UAAU,GAAGhB,IAAI,CAACiB,KAAL,CAAWF,WAAX,CAAjB;;AAEA,YAAIT,IAAI,CAACT,MAAL,GAAc,CAAlB,EAAqB;AACjBW,UAAAA,OAAO,CAACQ,UAAD,CAAP;AACH,SAFD,MAEO;AACHP,UAAAA,MAAM,CAAC,+BAAD,CAAN;AACH;AAEJ,OAVD,CAUE,OAAOG,KAAP,EAAc;AACZH,QAAAA,MAAM,CAAC,IAAII,KAAJ,CAAUD,KAAV,CAAD,CAAN;AACH;AAEJ,KAfM,CAAP;AAgBH;;AA3EO;;AA+EZM,MAAM,CAACC,OAAP,CAAe1B,KAAf,GAAuBA,KAAvB,C,CAAiD",
      "sourceRoot": "/Users/stockbit/Downloads/project_1_v2_boilerplate/src/",
      "sourcesContent": [
        "/**\n *                          Block class\n *  The Block class is a main component into any Blockchain platform,\n *  it will store the data and act as a dataset for your application.\n *  The class will expose a method to validate the data... The body of\n *  the block will contain an Object that contain the data to be stored,\n *  the data should be stored encoded.\n *  All the exposed methods should return a Promise to allow all the methods\n *  run asynchronous.\n */\n\nconst SHA256 = require('crypto-js/sha256');\nconst hex2ascii = require('hex2ascii');\n\nclass Block {\n\n    // Constructor - argument data will be the object containing the transaction data\n\tconstructor(data){\n\t\tthis.hash = null;                                           // Hash of the block\n\t\tthis.height = 0;                                            // Block Height (consecutive number of each block)\n\t\tthis.body = Buffer(JSON.stringify(data)).toString('hex');   // Will contain the transactions stored in the block, by default it will encode the data\n\t\tthis.time = 0;                                              // Timestamp for the Block creation\n\t\tthis.previousBlockHash = null;                              // Reference to the previous Block Hash\n    }\n\n    /**\n     *  validate() method will validate if the block has been tampered or not.\n     *  Been tampered means that someone from outside the application tried to change\n     *  values in the block data as a consecuence the hash of the block should be different.\n     *  Steps:\n     *  1. Return a new promise to allow the method be called asynchronous.\n     *  2. Save the in auxiliary variable the current hash of the block (`this` represent the block object)\n     *  3. Recalculate the hash of the entire block (Use SHA256 from crypto-js library)\n     *  4. Compare if the auxiliary hash value is different from the calculated one.\n     *  5. Resolve true or false depending if it is valid or not.\n     *  Note: to access the class values inside a Promise code you need to create an auxiliary value `let self = this;`\n     */\n    validate() {\n        let self = this;\n        return new Promise((resolve, reject) => {\n            try {\n                // Save in auxiliary variable the current block hash\n                let string = JSON.stringify(self)\n                let recalculatedHash = SHA256(string)\n\n                // Recalculate the hash of the Block\n                // Comparing if the hashes changed\n                // Returning the Block is valid\n                // do a thing, possibly async, then…\n                resolve(self.hash == recalculatedHash);\n\n            } catch (error) {\n                reject(new Error(error));\n            }\n        });\n    }\n\n    /**\n     *  Auxiliary Method to return the block body (decoding the data)\n     *  Steps:\n     *\n     *  1. Use hex2ascii module to decode the data\n     *  2. Because data is a javascript object use JSON.parse(string) to get the Javascript Object\n     *  3. Resolve with the data and make sure that you don't need to return the data for the `genesis block`\n     *     or Reject with an error.\n     */\n    getBData() {\n        // Getting the encoded data saved in the Block\n        // Decoding the data to retrieve the JSON representation of the object\n        // Parse the data to an object to be retrieve.\n\n        // Resolve with the data if the object isn't the Genesis block\n        let self = this;\n        return new Promise(async (resolve, reject) => {\n            try {\n                let decodedData = hex2ascii(self.body);\n                let parsedData = JSON.parse(decodedData);\n\n                if (self.height > 0) {\n                    resolve(parsedData);\n                } else {\n                    reject(\"Cannot retrieve genesis block\");\n                }\n\n            } catch (error) {\n                reject(new Error(error));\n            }\n\n        });\n    }\n\n}\n\nmodule.exports.Block = Block;                    // Exposing the Block class as a module\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1622013280325
  }
}